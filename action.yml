name: "Check formatting of Rust code with rustfmt"
description: |
  Run `cargo fmt` and check Rust code.
  Highlights places which are not correctly formatted.
branding:
  icon: "check-square"
  color: "yellow"

inputs:
  github_token:
    description: "Set to secrets.GITHUB_TOKEN"
    required: true
  manifest-path:
    description: "Specify the --manifest-path argument to rustfmt"
    required: false
    default: "./Cargo.toml"

runs:
  using: composite
  steps:

    - name: Install dependencies
      uses: awalsh128/cache-apt-pkgs-action@v1
      with:
        packages: jq curl
        version: 1.0

    - name: Run Rustfmt
      shell: bash
      run: cargo fmt --all --manifest-path=${{ inputs.manifest-path }} -- --color=never --emit=json > rustfmt-out.json
    
    - name: Create Annotations
      shell: bash
      run: |
        RUSTFMT_ERROR_COUNT=$(jq 'length' rustfmt-out.json)

        if [ $RUSTFMT_ERROR_COUNT -eq 0 ]; then
          echo "No formatting errors found."
          exit 0
        fi

        echo "Found $RUSTFMT_ERROR_COUNT formatting errors."

        jq -f '${{ github.action_path }}/rustfmt-to-annotations.jq' rustfmt-out.json | jq '{name: "Rustfmt Check", head_sha: "${{ inputs.commit_sha }}", output: .[0:50]}' > annotations.json

        curl -L \
        -X POST \
        -H "Accept: application/vnd.github+json" \
        -H "Authorization: Bearer ${{ inputs.github_token }}"\
        -H "X-GitHub-Api-Version: 2022-11-28" \
        https://api.github.com/repos/${{ github.repository }}/check-runs \
        -d @annotations.json
